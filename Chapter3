* 알고리즘

: 컴퓨팅 사고에서 문제 해결 방법이란 주어진 문제에서 필요한 답을 얻기 위한 절차나 방법

​

* 알고리즘의 조건

1) 유한성 : 반드시 유한한 횟수의 단계를 거친 후에 종료되어야 한다

2) 명확한 : 각 단계는 반드시 명확하게 정의되어야 한다

3) 입력 : 0개 이상의 입력이 있어야 한다

4) 출력 : 하나 또는 그 이상의 출력이 있어야 한다

5) 효과성 : 각 단계들은 효과적이어야 한다

​

* 알고리즘의 표현방법

1) 자연어 : 일상생활에서 사용하는 우리의 자연어로 알고리즘을 표현하는 방법

2) 의사 코드 : 특정 프로그래밍 언어는 아니지만 프로그래밍 언어와 비슷하게 표현한 방법,

그대로 컴퓨터에서 실행할 수 없다

3) 순서도 : 여러 종류의 도형과 순서를 알려 주는 화살표를 이용하여 명령이 실행되는 순서를 표현하는 방법

시스템 순서도

프로그램 순서도 - 개략 순서도, 상세 순서도

4) N-S 다이어그램 : 구조적이고 모듈화된 알고리즘을 표현하기에 효과적이고 쉽게 작성할 수 있으며, 

가독성이 좋은 표현 방법

​

* 알고리즘 수행 시간

O(Big - o)표기법 : 자료에 따라 알고리즘이 수행되는 최악의 경우의 성능을 표기하는 방법

- ex1) n^2 + 3n + 2 = O(n^2)

- ex2) 3n^3 + 100000n = O(n^3)

- ex3) 10000n^4 + n = O(n^4)

​

다음 코드의 수행 시간을 빅오표기법으로 나타내시오

#include <stdio.h>
int main() {
    int n = 0; //1
    int a = 1; //1
    scanf("%d", &n); //1
    for (int i = 1; i <= n; i++) { //n+1
        printf("%d", i); //n
    }
    return 0; //1
} //total : 2n + 1 = O(n)
#include <stdio.h>
int main() {
    int n = 0; //1
    int a = 1; //1
    scanf("%d", &n); //1
    for (int i = 1; i <= n; i++) { //n + 1
        for (int j = 1; j <= n; j++) { //n x (n + 1)
            printf("%d", j); //n x n
        }
        printf("%d", i); //n x n
    }
    return 0; //1
} //total : 3n^2 + 2n + 5 = O(n^2)
#include <stdio.h>
int main() {
    int n = 0; //1
    int a = 1; //1
    scanf("%d", &n); //1
    for (int i = 1; i <= n; i++) { //n + 1
        for (int j = 1; j <= n; j++) { //n x (n + 1)
            for (int k = 1; k <= n; k++) { //n x n x (n + 1)
                printf("%d", k); //n x n x n
            }
            printf("%d", j); //n x n
        }
        printf("%d", i); //n
    }
    return 0; //1
} //total : 2n^3+3n^2+3n+5 = O(n^3)
#include <stdio.h>
int main() {
    int n = 0; //1
    int a = 1; //1
    scanf("%d", &n); //1
   for (int i = 1; i < n - 1; i++) {
    for (int j = 1; j <= n - 2; j++) {
        for (int k = 1; k < n; k++) {
            printf("%d", k);
        }
        printf("%d", j);
    }
    printf("%d", i);
   }
   return 0; //1
}
* 빅오 표기법에 따른 수행 시간들 중에서 시간이 큰 순서대로 나열

O(n!) → O(2^n) → O(n^3) → O(n^2) → O(nlogn) → O(n) → O(logn) → O(1)
